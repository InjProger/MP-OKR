<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnClear.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>